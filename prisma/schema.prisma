// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  password      String
  email         String    @unique
  OTP           Int?
  otpExpiry     DateTime? // New field for OTP expiry time
  verified      Boolean?  @default(false)
  profilePicture String? // Optional field for profile picture URL
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Employee {
  id            Int       @id @default(autoincrement())
  Name          String    
  email         String    @unique
  salary        Int?     
  Phonenumber   Int?
  dateofbirth   DateTime?
  Address        String?
  Details       String?
  Starttime      DateTime?
  profilePicture String? // Optional field for profile picture URL
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Category {
  id          Int      @id @default(autoincrement())
  icon        String?
  name        String
  menu        Menu
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  menuItems   MenuItem[]
}

model MenuItem {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Float
  availability Options
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
// model Reservation {
//   id              Int       @id @default(autoincrement())
//   tableNumber     Int
//   paxNumber       String
//   reservationDate DateTime
//   reservationTime DateTime
//   depositFee      Float
//   status          String
//   floor           Int 
//   customerId      Int
//   paymentMethod   String
//   customer        Customer  @relation(fields: [customerId], references: [id])
//   createdAt       DateTime  @default(now())
//   updatedAt       DateTime  @updatedAt
// }

model Customer {
  id          Int       @id @default(autoincrement())
  title       String
  fullName    String
  phoneNumber String
  emailAddress String
  // reservations Reservation[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum Menu {
  NORMAL
  NEWYEAR
  SPECIAL
  DRINKS
  DESSERTS
}

enum Options {
  IN_STOCK
  OUT_OF_STOCK
}