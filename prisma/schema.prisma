
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  username      String    @unique
  password      String
  email         String    @unique
  role          Role?
  OTP           Int?
  address       String?
  otpExpiry     DateTime? // New field for OTP expiry time
  verified      Boolean?  @default(false)
  allowReservation Boolean? @default(false)
  allowStaffModify  Boolean?      @default(false)
 allowCategoryModify  Boolean?      @default(false)
  profilePicture String? // Optional field for profile picture URL
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Employee {
  id            Int       @id @default(autoincrement())
  Name          String    
  email         String    @unique
  salary        Int?     
  Phonenumber   String
  role          EmployeeRole?
  dateofbirth   DateTime?
  Address       String?
  Details       String?
  Starttime     DateTime?
  Endtime     DateTime?
  profilePicture String? // Optional field for profile picture URL
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
   attendances   Attendance[]   
}

model Category {
  id          Int      @id @default(autoincrement())
  icon        String?
  name        String
  menu        Menu
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  menuItems   MenuItem[]
  inventory   Inventory[]
}

model MenuItem {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Int
  photo        String?
  availability Options
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItems  OrderItem[]
}

model Reservation {
  id              Int       @id @default(autoincrement())
  tableNumber     Int
  paxNumber       String?
  reservationDate DateTime
  reservationTime DateTime
  reservationEndTime DateTime?
  depositFee      Float
  status          String
  floor           Int 
  customerId      Int
  paymentMethod   String
  customer        Customer  @relation(fields: [customerId], references: [id])
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Customer {
  id          Int       @id @default(autoincrement())
  title       String?
  fullName    String
  phoneNumber String
  emailAddress String
  reservations Reservation[]
  orders      Order[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Inventory {
  id          Int       @id @default(autoincrement())
  name        String
  categoryId  Int
  category    Category  @relation(fields: [categoryId], references: [id])

  stock       Stock

  status      Status
  price       Float
  perishable  Ans  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}



model Order {
  id          Int       @id @default(autoincrement())
  orderNumber String    @unique
  status      OrderStatus
  totalPrice  Float       @default(0)
  customerId  Int
  customer    Customer  @relation(fields: [customerId], references: [id])
  orderItems  OrderItem[]
  stripeSessionId   String?
  stripePaymentIntentId String? 
  paymentStatus     PaymentStatus @default(PENDING) // Enum for payment status
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model OrderItem {
  id          Int       @id @default(autoincrement())
  quantity    Int
  name        String?
  price       Float
  orderId     Int
  order       Order     @relation(fields: [orderId], references: [id])
  productId   Int
  product     MenuItem  @relation(fields: [productId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Attendance {
  id          Int            @id @default(autoincrement())
  date        DateTime       // Date of the attendance record
  status      AttendanceStatus @default(ABSENT)
  employeeId  Int            // Foreign key field
  employee    Employee       @relation(fields: [employeeId], references: [id]) // Relation field to Employee model

  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

// Enum for attendance status
enum AttendanceStatus {
  PRESENT
  ABSENT
  HALF_LEAVE
  PAID_VACATION
}

enum Menu {
  NORMAL
  NEWYEAR
  SPECIAL
  DRINKS
  DESSERTS
}

enum Options {
  IN_STOCK
  OUT_OF_STOCK
}

enum EmployeeRole {
  MANAGER
  STAFF
}

enum Stock {
  INSTOCK
  OUTOFSTOCK
}



enum Status {
  ACTIVE
  INACTIVE
}
enum Ans {
  Yes
  No
}

enum OrderStatus {
  IN_PROCESS
  COMPLETED
  CANCELLED
  READY
}

enum Role {
  ADMIN
  SUBADMIN
}
enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}